cmake_minimum_required(VERSION 3.14)

project(data_tamer LANGUAGES CXX)

set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

if(${CMAKE_PROJECT_NAME} STREQUAL ${PROJECT_NAME})
    option(DATA_TAMER_BUILD_TESTS "Build tests" ON)
    option(DATA_TAMER_BUILD_EXAMPLES "Build examples" ON)
else()
    option(DATA_TAMER_BUILD_TESTS "Build tests" OFF)
    option(DATA_TAMER_BUILD_EXAMPLES "Build examples" OFF)
endif()

if (MSVC)
    add_compile_options(/W4 /WX)
else()
    add_compile_options(-Wall -Wextra -Werror -pedantic)
endif()

find_package(ament_cmake QUIET)

if ( ament_cmake_FOUND )
    set(ROS2_SINK 
        src/sinks/ros2_publisher_sink.cpp)
endif()

add_library(data_tamer STATIC
    include/data_tamer/channel.hpp
    include/data_tamer/data_tamer.hpp
    include/data_tamer/types.hpp
    include/data_tamer/values.hpp
    include/data_tamer/sinks/dummy_sink.hpp
    include/data_tamer/sinks/mcap_sink.hpp

    src/channel.cpp
    src/data_tamer.cpp
    src/data_sink.cpp
    src/types.cpp

    src/sinks/mcap_sink.cpp
    ${ROS2_SINK}
    include/data_tamer/details/mutex.hpp
)

target_compile_features(data_tamer PUBLIC cxx_std_17)
target_include_directories(data_tamer
 PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/3rdparty>
  $<INSTALL_INTERFACE:include>
)

# detect if compiling in ROS2
find_package(ament_cmake QUIET)
if ( ament_cmake_FOUND )
    target_compile_definitions(data_tamer PUBLIC USING_ROS2=1 )
    set(COMPILING_FOR_ROS2 true)

    find_package(mcap_vendor REQUIRED)
    find_package(rclcpp REQUIRED)
    find_package(data_tamer_msgs REQUIRED)

    ament_target_dependencies(data_tamer mcap_vendor rclcpp data_tamer_msgs)

    ament_export_targets(data_tamerTargets HAS_LIBRARY_TARGET)
    ament_export_dependencies(mcap_vendor rclcpp data_tamer_msgs)
    ament_package()
else()
    find_package(mcap REQUIRED)
    target_link_libraries(data_tamer PRIVATE mcap::mcap)
endif()

install(
  DIRECTORY include/
  DESTINATION include
)

install(
  TARGETS data_tamer
  EXPORT data_tamerTargets
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib
  RUNTIME DESTINATION bin
  INCLUDES DESTINATION include
)

if(DATA_TAMER_BUILD_TESTS)
    include(CTest)
    enable_testing()
    add_subdirectory(tests)
endif()

if(DATA_TAMER_BUILD_EXAMPLES)
    add_subdirectory(examples)
endif()



